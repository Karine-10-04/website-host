load_module modules/ndk_http_module.so;
load_module modules/ngx_http_lua_module.so;

user root;
worker_processes auto;
error_log /var/log/nginx/webhook-error.log warn;

events { worker_connections 1024; }

http {
    include /etc/nginx/mime.types;
    default_type text/plain;
	client_body_buffer_size 1M;
	lua_package_path "/etc/nginx/lua/?.lua;;";
    server {
		listen                  80;
		root                    /usr/share/nginx/html;
		index                   index.html;
		server_name             localhost;
		location /webhook {
			content_by_lua_block {
				ngx.req.read_body()
				local body = ngx.req.get_body_data()
				if body then
					local headers = ngx.req.get_headers()
					local github_event = headers['x-github-event']
					if github_event == 'push' then
						local webhook_header = headers['X-Hub-Signature-256']
						if webhook_header then
							local webhook_sha = webhook_header:gsub("sha256=", "")
							local sha = require("sha2")
							local signature = sha.hmac(sha.sha256, "${WEBHOOK_SECRET}")
							signature(body)
							if webhook_sha == signature() then
								local file, err = io.open("/var/log/nginx/webhook-payload.log", "a")
								if not file then
									return ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
								end
								file:write(os.date("%Y-%m-%d %H:%M:%S") .. " [" .. github_event .. "]: " .. body .. "\n")
								file:flush()
								file:close()
								local handle = io.popen("/usr/local/bin/sync.sh > /var/log/nginx/webhook-sync.log 2>&1  &")
								local out = handle:read("*a")
								handle:close()
								ngx.say(out)
								return ngx.exit(ngx.HTTP_OK)
							end
							return ngx.exit(ngx.HTTP_FORBIDDEN)
						end
					end
				end
				return ngx.exit(ngx.HTTP_BAD_REQUEST)
			}
		}
	}
}
